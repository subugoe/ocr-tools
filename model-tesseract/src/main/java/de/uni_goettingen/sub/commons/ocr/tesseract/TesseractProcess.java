package de.uni_goettingen.sub.commons.ocr.tesseract;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.uni_goettingen.sub.commons.ocr.api.AbstractImage;
import de.uni_goettingen.sub.commons.ocr.api.AbstractOutput;
import de.uni_goettingen.sub.commons.ocr.api.AbstractProcess;
import de.uni_goettingen.sub.commons.ocr.api.OcrFormat;
import de.uni_goettingen.sub.commons.ocr.api.OcrImage;
import de.uni_goettingen.sub.commons.ocr.api.OcrOutput;
import de.uni_goettingen.sub.commons.ocr.api.OcrProcess;
import de.uni_goettingen.sub.commons.ocr.api.OcrTextType;
import de.unigoettingen.sub.commons.ocr.util.FileMerger;

/**
 * Represents an OCR job with several images.
 */
public class TesseractProcess extends AbstractProcess implements
		OcrProcess {

	private static final long serialVersionUID = 4819408808755150623L;

	/** The logger. */
	protected static Logger logger = LoggerFactory
			.getLogger(TesseractProcess.class);

	/**
	 * The temp files which are generated for each run of tesseract. Are merged
	 * into one file at the end.
	 */
	private List<File> tempFiles = new ArrayList<File>();

	/**
	 * Languages of the images, mapped to strings which tesseract understands.
	 * Tesseract can only use one for each image.
	 */
	private static Map<String, String> languages = new HashMap<String, String>();

	/**
	 * The extensions that are generated by tesseract. txt for text results,
	 * html for hocr results
	 */
	private static Map<OcrFormat, String> extensions = new HashMap<OcrFormat, String>();

	/** Mappings of the interface formats to tesseract-specific ones */
	private static Map<OcrFormat, String> formats = new HashMap<OcrFormat, String>();

	static {
		languages.put("de", "deu");
		languages.put("en", "eng");

		extensions.put(OcrFormat.TXT, "txt");
		extensions.put(OcrFormat.HOCR, "html");

		formats.put(OcrFormat.TXT, "");
		formats.put(OcrFormat.HOCR, "hocr");
	}

	private long duration = 0l;
	

	/**
	 * Instantiates a new tesseract ocr process.
	 */
	public TesseractProcess() {
		super();
	}

	@Override
	public void addImage(URI localUri) {
		OcrImage image = new AbstractImage() {};
		image.setLocalUri(localUri);
		ocrImages.add(image);
	}

	@Override
	public void addOutput(OcrFormat format) {		
		OcrOutput output = new AbstractOutput() {};
		output.setLocalUri(constructLocalUri(format));
		output.setFormat(format);
		ocrOutputs.add(output);
	}

	/**
	 * Manages the input images and output files, then starts tesseract once for
	 * each image.
	 */
	public void start() {
		
		long start = System.currentTimeMillis();
		
		for (OcrOutput formatToOutput : ocrOutputs) {

			// eg TXT
			OcrFormat format = formatToOutput.getFormat();

			OcrOutput output = formatToOutput;

			// to have a different file name for each OCRed text
			int i = 1;

			for (OcrImage image : ocrImages) {
				String tempPath = System.getProperty("user.dir")
						+ System.getProperty("file.separator") + "temp.tif";
				File localImage = getLocalImage(image, tempPath);
				File localTempOutput = getLocalOutput(output, i + "");
				i++;

				executeTesseract(localImage, format, localTempOutput);
				// localImage.delete();

				// eg html for HOCR files, is automatically added by tesseract
				String actualExtension = extensions.get(format);

				String actualOutput = localTempOutput.getAbsolutePath() + "."
						+ actualExtension;
				tempFiles.add(new File(actualOutput));

			}

			File localOutput = getLocalOutput(output, "");

			FileMerger.mergeFiles(format, tempFiles, localOutput);

			for (File file : tempFiles) {
				logger.debug("Deleting file " + file.getAbsolutePath());
				file.delete();
			}
		}
		duration = System.currentTimeMillis() - start;
	}

	private File getLocalImage(OcrImage image, String tempPath) {
		File result = null;

		String protocol = image.getLocalUri().getScheme();

		if (protocol.equals("file")) {
			result = new File(image.getLocalUri().getPath());

		} else {
			try {
				result = new File(tempPath);
				InputStream is = image.getLocalUri().toURL().openStream();
				BufferedOutputStream bos = new BufferedOutputStream(
						new FileOutputStream(result));

				byte[] buffer = new byte[32 * 1024];
				while ((is.read(buffer)) != -1) {
					bos.write(buffer);
				}

				is.close();
				bos.close();

			} catch (MalformedURLException e) {
				logger.error("Not a URL: " + image.getLocalUri(), e);
			} catch (IOException e) {
				logger.error("Error while downloading or saving image.", e);
			}

		}

		return result;
	}

	private File getLocalOutput(OcrOutput output, String postfix) {
		String protocol = output.getLocalUri().getScheme();
		if (protocol.equals("file")) {
			return new File(output.getLocalUri().getPath() + postfix);
		} else {
			throw new RuntimeException("Unsupported protocol for outputs: "
					+ protocol);
		}
	}

	/**
	 * Execute tesseract.
	 * 
	 * @param image
	 *            the image
	 * @param format
	 *            the format
	 * @param output
	 *            the output
	 */
	private void executeTesseract(File image, OcrFormat format, File output) {

		File parentDir = new File(output.getParent());
		
		if(!parentDir.exists()) {
				parentDir.mkdirs();
		}
		
		Tesseract tesseract = new Tesseract(image, output);
		tesseract.setFormat(formats.get(format));

		// tesseract only takes one language
		Locale locale = new ArrayList<Locale>(langs).get(0);
		tesseract.setLanguage(languages.get(locale.getLanguage()));

		if (getTextType() == OcrTextType.GOTHIC) {
			tesseract.setGothic(true);
		}

		tesseract.execute();

	}
}
