JMX-Konfiguration mit Spring

  Die Konfiguration der MBeans findet in XML-Dateien für Spring-Beans statt. 
  In unserem Fall heißen sie <<<context.xml>>> und befinden sich in den Ordnern 
  <<<resources-abbyy>>>
  (für die Einzel-User-Implementierung) und <<<resources-abbyy-multiuser>>>
  (für die parallel-fähige Implementierung mit Hazelcast).
  
  Der relevante Ausschnitt aus der Datei sieht so aus:
  
+----------------+
    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
    <property name="beans">
        <map>
           <entry key="Abbyy:name=AbbyyOCREngine" value-ref="abbyyServerOCREngine"/>
        </map>
    </property>
    ...
            <property name="managedMethods">
                <value>getWaitingProcesses,getWaitingProcessesCount,getRunningProcessesCount,removeWaitingProcesses,removeAllProcesses</value>
            </property>
    ...
    </bean>
+----------------+

  Als MBean wird die OCR-Engine definiert, die auch als Spring-Bean in derselben Datei definiert ist.
  Der "key" ist dabei der MBean-Name, der in JConsole angezeigt wird (ObjectName). Die exportierten Methoden
  sind unter "value" aufgelistet. Um die Monitoring-Funktionalität zu erweitern, können hier beliebige
  öffentliche Methoden der Engine hinzugefügt werden. Z. Z. kann über JConsole Folgendes gemacht werden:
  
  * getWaitingProcesses, getWaitingProcessesCount: Namen bzw. Anzahl der wartenden Prozesse. Das sind
    Prozesse, die im OCRExecutor als Thread hinzugefügt wurden, aber noch nicht laufen. 
    
    
  * getRunningProcessesCount: Anzahl der laufenden Prozesse, d. h. ein Teil der Bilder wurde schon an 
    den Abbyy Server verschickt.
    
    
  * removeWaitingProcesses: Alle wartenden Prozesse werden gelöscht. Die laufenden werden noch zu Ende 
    ausgeführt und das Programm wird danach beendet.
    
    
  * removeAllProcesses: Wartende und laufende Prozesse werden gelöscht. Das Programm wird dann sofort 
    beendet. Das Beenden läuft kontrolliert ab (zB wird die Lock-Datei gelöscht), im Gegensatz zum
    killen der JVM.